import serial
import sqlite3
import datetime
import time

# open serial port and connect to database
ser = serial.Serial('COM3', 115200, timeout=5)  # open serial port
conn = sqlite3.connect('occupancy.db')  # connect to the database
c = conn.cursor()
c.execute("CREATE TABLE IF NOT EXISTS data (node real, datetime text, Grideye text, CO2PPM real, Temperature real, \
Humidity real)")


def activate1():

        ser.reset_output_buffer()

        data = []
# reset pin interrupt on launchpad
        request_end = (0x7E, 0x00, 0x10, 0x17, 0x00, 0x00, 0x13, 0xA2, 0x00, 0x40, 0x7A, 0xAC, 0x88, 0xFF, 0xFE, 0x02,
                       0x44, 0x31, 0x04, 0xCD)
        ser.write(request_end)

        time.sleep(0.25)
        
# Request for data  for testing I'm sending test, the final thing to send is currently commented
        request = (0x7E, 0x00, 0x10, 0x17, 0x00, 0x00, 0x13, 0xA2, 0x00, 0x40, 0x7A, 0xAC, 0x88, 0xFF, 0xFE, 0x02,
                   0x44, 0x31, 0x05, 0xCC)  # toggles pin interrupt
#        request = (0x7E, 0x00, 0x12, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFE, 0x00,\
        #  0x00, 0x74, 0x65, 0x73, 0x74, 0x34) #sends test
        ser.write(request)


def reading1():

# read in data
        x = ser.read()
        x = int.from_bytes(a, byteorder='big')
        if x != 0x7E:  # check starting bit, discarding if wrong
                reading1()
                return
        if x == 0x7E:
                print('Packet received\n')
        y = ser.read(2)
        y = int.from_bytes(y, byteorder='big')  # calculate length of packet
        z = ser.read(1)
        z = int.from_bytes(z, byteorder='big')  # check frame type, discarding if not a receive packet
        print(z)
        if z != 0x90:
                reading1()
                return
        data = ser.read(y)  # read rest of packet
        print(data)


def storing1():
# Break data into more manageable sections
        grideye = [0 for i in range(70)]
        # sixtyfour_source_addr=data[0:8]
        # sixteen_source_addr=data[8:10]
        RF_Data=data[11:a-1]
        
        node = RF_Data[0]
        CO2 = (RF_Data[1]*200)
        Humid = ((RF_Data[2] << 8) | RF_Data[3])/10
        Temp = ((RF_Data[4] << 8) | RF_Data[5])/10
        
        for i in range(64):
                grideye[i] = (((RF_Data[2*i+6] << 8) | RF_Data[2*i+7])/4)

# map grideye data to a string for simplicity in entering them into the database
        gridstr = ','.join(map(str,grideye))
        
# finds the time

        current = datetime.datetime.now().strftime("%Y-%m-%dT%H:%M:%S:%f")

# input data into database
        c.execute("INSERT INTO data(node, datetime, Grideye, CO2PPM, Temperature, Humidity) VALUES (?, ?, ?, ?,\
        ?, ?)", (node, current, gridstr, CO2, Temp, Humid))
        
        conn.commit()
        
for t in range(10):
        reading1()
        time.sleep(.25)

conn.close





