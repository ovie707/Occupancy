/*RHT03
 * Ovie Onoriose
 * April 25 2016
 * Based off of code by Juan Martinez and Rene Hernandez
 *
 * Interface RHT03 Temperature and Humidity sensor with Tiva-C Launchpad
 *
 * The outputted values are 10 times the actual measured ones. This is due to UARTprintf not supporting floats at the moment.
 */

#include <stdint.h> // Variable definitions for the C99 standard.
#include <stdbool.h> // Boolean definitions for the C99 standard.
#include <stdio.h>
#include <stdlib.h>
#include "inc/tm4c123gh6pm.h" // Definitions for the interrupt and register assignments.
#include "inc/hw_memmap.h" // Memory map definitions of the Tiva C Series device.
#include "inc/hw_types.h" // Definitions of common types and macros.
#include "inc/hw_gpio.h" // Defines and Macros for GPIO hardware.
#include "driverlib/sysctl.h" // Definitions and macros for System Control API of DriverLib.
#include "driverlib/interrupt.h" // Definitions and macros for NVIC Controller API of DriverLib.
#include "driverlib/gpio.h" // Definitions and macros for GPIO API of DriverLib.
#include "driverlib/timer.h" // Definitions and macros for Timer API of DriverLib.
#include "driverlib/pin_map.h" //Mapping of peripherals to pins for all parts.
#include "driverlib/uart.h" // Definitions and macros for UART API of DriverLib.
#include "driverlib/fpu.h"

#include "utils/uartstdio.h" // Prototypes for the UART console functions.
							 // Needs to add "utils/uartstdio.c" through a relative link.

#define TIMER0_FREQ    1 // time between measurements in seconds
#define UART0_BAUDRATE    115200 // UART baudrate in bps.


//creates arrays for later use
int rht03_dat[5] = {0, 0, 0, 0, 0};

// function prototypes
void init_LEDs(void);
void init_timer(void);
void init_UART(void);
void read_rht03_dat(void);
void Timer0_ISR(void);


extern void UARTStdioIntHandler(void);


// global variables
uint32_t sys_clock;

int main(void)
{
	// Runs the clock at 40 MHZ
	SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN);
	sys_clock = SysCtlClockGet();

	IntMasterEnable();

	init_UART();
	init_timer();

	TimerEnable(TIMER0_BASE, TIMER_A);

	while(1);
}

void init_timer(void)
{
	// Enable and configure timer peripheral.
	SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);

	// Configure Timer0 as a 32-bit timer in periodic mode.
	TimerConfigure(TIMER0_BASE, TIMER_CFG_PERIODIC);
	// Initialize timer load register.
	TimerLoadSet(TIMER0_BASE, TIMER_A, sys_clock*TIMER0_FREQ -1);

	// Registers a function to be called when the interrupt occurs.
	IntRegister(INT_TIMER0A, read_rht03_dat);
	// The specified interrupt is enabled in the interrupt controller.
	IntEnable(INT_TIMER0A);
	// Enable the indicated timer interrupt source.
	TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT);

}

void init_UART(void)
{
	// enable and configure UART0 for debugging printouts.
	SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
	GPIOPinConfigure(GPIO_PA0_U0RX);
	GPIOPinConfigure(GPIO_PA1_U0TX);
	GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);

	// Registers a function to be called when the interrupt occurs.
	IntRegister(INT_UART0, UARTStdioIntHandler);
	UARTStdioConfig(0, UART0_BAUDRATE, sys_clock);
}


void read_rht03_dat(void)
{
	TimerIntClear(TIMER0_BASE, TIMER_TIMA_TIMEOUT);

	int laststate = 1, counter = 0, i = 0, j = 0, humid = 0, temp = 0;

	//Delay counts for a 40Mhz clock
	int delay_1us = 13;
	int delay_30us = 800;
	int delay_5ms = 66667;
	// Creates array to store the information for later use when receiving the data from the sensor
	for(i = 0; i < 5; i++)
	{
		rht03_dat[i] = 0;
	}

	//Enable and set PE4 as digital output
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
	GPIOPinTypeGPIOOutput(GPIO_PORTE_BASE, GPIO_PIN_4);

	//pulls PE4 Low for 5ms
	GPIOPinWrite(GPIO_PORTE_BASE, GPIO_PIN_4, 0);
	SysCtlDelay(delay_5ms);

	//pulls PE4 High for 30us
	GPIOPinWrite(GPIO_PORTE_BASE, GPIO_PIN_4, 1);
	SysCtlDelay(delay_30us);

	//set PE4 as an digital input
	GPIOPinTypeGPIOInput(GPIO_PORTE_BASE, GPIO_PIN_4);

	//detect changes in received stream
	for(i = 0; i < 85; i++)
	{
		counter = 0;
		laststate = GPIOPinRead(GPIO_PORTE_BASE, GPIO_PIN_4);

		while (GPIOPinRead(GPIO_PORTE_BASE, GPIO_PIN_4) == laststate)
		{
			counter++;
			SysCtlDelay(delay_1us);
			if ( counter == 255 )
			{
				break;
			}
		}
		laststate = GPIOPinRead(GPIO_PORTE_BASE, GPIO_PIN_4);

		if (counter == 255)
		break;

		// ignore first 3 transitions
		if ( (i >= 4) && (i % 2 == 0) )
		{
			// shove each bit into the storage bytes
			rht03_dat[j / 8] <<= 1;
			if (counter > 25) //if counter gets higher than 25, the bit is 1, if not, it's 0
				rht03_dat[j / 8] |= 1;
			j++;
		}
	}

	//check we read 40 bits + verify checksum and print
	if ((j > 39) && (rht03_dat[4] == ((rht03_dat[0] + rht03_dat[1] + rht03_dat[2] + rht03_dat[3]) & 0xFF)))
	{
		humid = ((rht03_dat[0] << 8) | rht03_dat[1]);
		temp = ((rht03_dat[2] << 8) | rht03_dat[3]);
		UARTprintf("Humidity = %d%% Temperature = %d*C \n Outputted values are 10 times the actual measured ones.\n", humid, temp);
	}
	else  {
		UARTprintf("Data not good, skip\n");
	}
}

